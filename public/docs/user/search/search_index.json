{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Objetivo El presente documento tiene como objetivo establecer los requerimientos funcionales y no funcionales necesarios para la implementaci\u00f3n de una arquitectura multiempresa en el sistema ERP KAVAC. Esta funcionalidad permitir\u00e1 la gesti\u00f3n centralizada de las operaciones del grupo empresarial, al tiempo que garantizar\u00e1 el acceso segregado e independiente a la informaci\u00f3n y funcionalidades espec\u00edficas de cada empresa o sucursal, dentro de todos los m\u00f3dulos del sistema. Alcance La funcionalidad multiempresa se desarrollar\u00e1 sobre la versi\u00f3n 2.0.0 del sistema ERP KAVAC , abarcando de forma integral toda la plataforma y sus componentes. Esto incluye los procesos y operaciones ejecutados en cada uno de los m\u00f3dulos del sistema, asegurando que la experiencia del usuario y la l\u00f3gica de negocio respeten el aislamiento y la identidad individual de cada empresa gestionada. Definiciones A continuaci\u00f3n, se describen los t\u00e9rminos clave y siglas utilizadas en este documento para facilitar su comprensi\u00f3n: T\u00e9rmino/Sigla Definici\u00f3n ERP Enterprise Resource Planning . Sistema de planificaci\u00f3n de recursos empresariales. Multitenant Arquitectura de software que permite que una \u00fanica instancia de la aplicaci\u00f3n sirva a m\u00faltiples clientes ( tenants ) con aislamiento de datos. Tenant Cliente individual (empresa o sucursal) que opera dentro de una instancia multitenant del sistema. KAVAC Nombre del sistema ERP objeto del presente documento. M\u00f3dulo Componente funcional del sistema ERP (ej. compras, ventas, inventario, contabilidad, etc.).","title":"Introducci\u00f3n"},{"location":"cases/","text":"(Ejemplo de caso de uso) Caso de Uso: Consultar informaci\u00f3n de una sucursal Actor: Administrador Precondiciones: El usuario ha iniciado sesi\u00f3n en el sistema con sus credenciales v\u00e1lidas. El usuario tiene los permisos necesarios para consultar la informaci\u00f3n de la sucursal. Postcondiciones: El usuario ha visualizado la informaci\u00f3n solicitada de la sucursal. Flujo principal: El usuario selecciona la opci\u00f3n \"Consultar sucursales\" en el men\u00fa principal. El sistema presenta una lista de sucursales, filtrable por empresa y otros criterios (nombre, ciudad, etc.). El usuario selecciona la sucursal deseada. El sistema muestra la informaci\u00f3n detallada de la sucursal, incluyendo: Nombre de la sucursal Direcci\u00f3n completa Datos de contacto (tel\u00e9fono, correo electr\u00f3nico) Gerente de la sucursal Empresa a la que pertenece Estado (activa/inactiva) Fecha de creaci\u00f3n Otros datos relevantes (ej: n\u00famero de empleados, ventas totales, etc.) El usuario puede regresar al men\u00fa principal o realizar otras acciones. Flujos alternativos: Usuario sin permisos: Si el usuario no tiene los permisos necesarios, el sistema muestra un mensaje de error y no permite acceder a la informaci\u00f3n. Sucursal no encontrada: Si la sucursal seleccionada no existe, el sistema muestra un mensaje de error. Error de conexi\u00f3n a la base de datos: Si ocurre un error al conectar con la base de datos, el sistema muestra un mensaje de error e intenta reconectar. Excepciones: Ninguna. Requisitos no funcionales: El sistema debe ser r\u00e1pido y eficiente en la consulta de informaci\u00f3n. La interfaz de usuario debe ser intuitiva y f\u00e1cil de usar. La informaci\u00f3n debe ser presentada de forma clara y organizada.","title":"Casos de uso"},{"location":"data/","text":"Es posible compartir datos entre clientes en un sistema multitenant en Laravel, pero no es la pr\u00e1ctica recomendada y debe hacerse con mucho cuidado y con una justificaci\u00f3n clara. Por lo general, la principal ventaja del multitenancy es precisamente el aislamiento de datos. Razones para compartir datos entre clientes Datos globales/comunes: Ejemplo: Informaci\u00f3n de referencia como cat\u00e1logos de productos, listas de pa\u00edses, etc., que todos los clientes pueden usar. Consideraci\u00f3n: Estos datos deben ser inmutables o gestionados con cuidado para evitar problemas. Funcionalidades compartidas: Ejemplo: Un sistema de foros donde los clientes pueden interactuar entre s\u00ed. Consideraci\u00f3n: Requiere una cuidadosa gesti\u00f3n de permisos y acceso. Informes agregados: Ejemplo: Generar informes agregados a nivel de la empresa, donde los datos individuales de los clientes se combinan. Consideraci\u00f3n: Se debe garantizar la privacidad y el anonimato de los datos individuales. C\u00f3mo compartir datos de forma segura Base de datos separada (o tablas separadas): Opci\u00f3n: Crear una base de datos (o tablas) separada para los datos compartidos. Beneficio: Mantiene el aislamiento de los datos de los clientes. Columnas de \"tenant_id\" (o similar): Opci\u00f3n: Agregar una columna \"tenant_id\" a las tablas compartidas para identificar a qu\u00e9 cliente pertenece cada dato. Consideraci\u00f3n: Requiere una cuidadosa gesti\u00f3n de las consultas para evitar fugas de datos. Roles y permisos: Opci\u00f3n: Implementar un sistema de roles y permisos para controlar el acceso a los datos compartidos. Consideraci\u00f3n: Aseg\u00farate de que los permisos sean precisos y bien gestionados. Anonimizaci\u00f3n de datos: Opci\u00f3n: Anonimizar los datos individuales antes de compartirlos. Beneficio: Protege la privacidad de los clientes.","title":"Intercambio de datos entre clientes (Tenants)"},{"location":"data/#razones-para-compartir-datos-entre-clientes","text":"","title":"Razones para compartir datos entre clientes"},{"location":"data/#datos-globalescomunes","text":"Ejemplo: Informaci\u00f3n de referencia como cat\u00e1logos de productos, listas de pa\u00edses, etc., que todos los clientes pueden usar. Consideraci\u00f3n: Estos datos deben ser inmutables o gestionados con cuidado para evitar problemas.","title":"Datos globales/comunes:"},{"location":"data/#funcionalidades-compartidas","text":"Ejemplo: Un sistema de foros donde los clientes pueden interactuar entre s\u00ed. Consideraci\u00f3n: Requiere una cuidadosa gesti\u00f3n de permisos y acceso.","title":"Funcionalidades compartidas:"},{"location":"data/#informes-agregados","text":"Ejemplo: Generar informes agregados a nivel de la empresa, donde los datos individuales de los clientes se combinan. Consideraci\u00f3n: Se debe garantizar la privacidad y el anonimato de los datos individuales.","title":"Informes agregados:"},{"location":"data/#como-compartir-datos-de-forma-segura","text":"","title":"C\u00f3mo compartir datos de forma segura"},{"location":"data/#base-de-datos-separada-o-tablas-separadas","text":"Opci\u00f3n: Crear una base de datos (o tablas) separada para los datos compartidos. Beneficio: Mantiene el aislamiento de los datos de los clientes.","title":"Base de datos separada (o tablas separadas):"},{"location":"data/#columnas-de-tenant_id-o-similar","text":"Opci\u00f3n: Agregar una columna \"tenant_id\" a las tablas compartidas para identificar a qu\u00e9 cliente pertenece cada dato. Consideraci\u00f3n: Requiere una cuidadosa gesti\u00f3n de las consultas para evitar fugas de datos.","title":"Columnas de \"tenant_id\" (o similar):"},{"location":"data/#roles-y-permisos","text":"Opci\u00f3n: Implementar un sistema de roles y permisos para controlar el acceso a los datos compartidos. Consideraci\u00f3n: Aseg\u00farate de que los permisos sean precisos y bien gestionados.","title":"Roles y permisos:"},{"location":"data/#anonimizacion-de-datos","text":"Opci\u00f3n: Anonimizar los datos individuales antes de compartirlos. Beneficio: Protege la privacidad de los clientes.","title":"Anonimizaci\u00f3n de datos:"},{"location":"diagrams/","text":"Los diagramas permiten visualizar de forma clara y estructurada c\u00f3mo funciona el sistema KAVAC ERP a nivel arquitect\u00f3nico, funcional y de interacci\u00f3n entre actores. Esta secci\u00f3n incluye los siguientes tipos: Diagrama de Arquitectura General Usuarios acceden al sistema a trav\u00e9s de un portal central. Middleware identifica el tenant (empresa) por subdominio, token o cabecera. Se establece conexi\u00f3n a la base de datos correspondiente. Cada tenant tiene datos y configuraciones aisladas. Servicios externos pueden integrarse por tenant. [Diagrama aqu\u00ed \u2013 puede representarse como texto si no tienes herramienta gr\u00e1fica] Cliente \u2500\u2500\u2500\u25ba Frontend Vue/Blade \u2500\u2500\u2500\u25ba Middleware Tenant \u2500\u2500\u2500\u25ba Backend Laravel \u2500\u2500\u2500\u25ba DB por Tenant Middleware Tenant \u2500\u2500\u2500\u25ba Servicios API DB por Tenant \u2500\u2500\u2500\u25ba Backup / Logs Diagrama de Flujo de Autenticaci\u00f3n Usuario accede con su correo y contrase\u00f1a. El sistema verifica en qu\u00e9 empresa(s) tiene acceso. Si tiene acceso a una sola, se inicia sesi\u00f3n directamente. Si tiene m\u00faltiples accesos, se muestra pantalla para seleccionar empresa activa. Se crea la sesi\u00f3n con el contexto del tenant. [Flujo representado como texto simple o pseudodiagrama] Inicio Sesi\u00f3n \u2502 Validar Credenciales \u251c\u2500\u2500 Usuario tiene 1 tenant \u2500\u2500\u25ba Establecer sesi\u00f3n \u2514\u2500\u2500 Usuario tiene m\u00faltiples \u2500\u2500\u25ba Mostrar selector \u2500\u2500\u25ba Establecer sesi\u00f3n Diagrama de Casos de Uso Actores Principales: - Administrador del sistema - Usuario de empresa - Gerente de empresa - API externa (facturaci\u00f3n, pagos) Casos de uso clave: - Gestionar empresas - Gestionar usuarios y roles - Registrar compras/ventas - Visualizar reportes - Cambiar empresa activa - Configurar par\u00e1metros por tenant [Representaci\u00f3n textual tipo lista, si no hay gr\u00e1fico disponible] Administrador: - Crear/editar empresas - Asignar usuarios a empresas - Ver logs de auditor\u00eda Usuario de empresa: - Registrar compras/ventas - Gestionar inventario - Ver reportes Gerente: - Ver dashboard - Descargar reportes financieros API externa: - Consultar datos - Enviar documentos electr\u00f3nicos Diagrama Entidad-Relaci\u00f3n Simplificado Tenant \u2500\u2500\u252c\u2500\u2500\u25ba Empresa \u251c\u2500\u2500\u25ba Usuario (con roles por tenant) \u251c\u2500\u2500\u25ba Configuraci\u00f3n \u251c\u2500\u2500\u25ba Inventario \u251c\u2500\u2500\u25ba Clientes / Proveedores \u2514\u2500\u2500\u25ba Facturas / Compras / Ventas","title":"Diagramas"},{"location":"diagrams/#diagrama-de-arquitectura-general","text":"Usuarios acceden al sistema a trav\u00e9s de un portal central. Middleware identifica el tenant (empresa) por subdominio, token o cabecera. Se establece conexi\u00f3n a la base de datos correspondiente. Cada tenant tiene datos y configuraciones aisladas. Servicios externos pueden integrarse por tenant. [Diagrama aqu\u00ed \u2013 puede representarse como texto si no tienes herramienta gr\u00e1fica] Cliente \u2500\u2500\u2500\u25ba Frontend Vue/Blade \u2500\u2500\u2500\u25ba Middleware Tenant \u2500\u2500\u2500\u25ba Backend Laravel \u2500\u2500\u2500\u25ba DB por Tenant Middleware Tenant \u2500\u2500\u2500\u25ba Servicios API DB por Tenant \u2500\u2500\u2500\u25ba Backup / Logs","title":"Diagrama de Arquitectura General"},{"location":"diagrams/#diagrama-de-flujo-de-autenticacion","text":"Usuario accede con su correo y contrase\u00f1a. El sistema verifica en qu\u00e9 empresa(s) tiene acceso. Si tiene acceso a una sola, se inicia sesi\u00f3n directamente. Si tiene m\u00faltiples accesos, se muestra pantalla para seleccionar empresa activa. Se crea la sesi\u00f3n con el contexto del tenant. [Flujo representado como texto simple o pseudodiagrama] Inicio Sesi\u00f3n \u2502 Validar Credenciales \u251c\u2500\u2500 Usuario tiene 1 tenant \u2500\u2500\u25ba Establecer sesi\u00f3n \u2514\u2500\u2500 Usuario tiene m\u00faltiples \u2500\u2500\u25ba Mostrar selector \u2500\u2500\u25ba Establecer sesi\u00f3n","title":"Diagrama de Flujo de Autenticaci\u00f3n"},{"location":"diagrams/#diagrama-de-casos-de-uso","text":"Actores Principales: - Administrador del sistema - Usuario de empresa - Gerente de empresa - API externa (facturaci\u00f3n, pagos) Casos de uso clave: - Gestionar empresas - Gestionar usuarios y roles - Registrar compras/ventas - Visualizar reportes - Cambiar empresa activa - Configurar par\u00e1metros por tenant [Representaci\u00f3n textual tipo lista, si no hay gr\u00e1fico disponible] Administrador: - Crear/editar empresas - Asignar usuarios a empresas - Ver logs de auditor\u00eda Usuario de empresa: - Registrar compras/ventas - Gestionar inventario - Ver reportes Gerente: - Ver dashboard - Descargar reportes financieros API externa: - Consultar datos - Enviar documentos electr\u00f3nicos","title":"Diagrama de Casos de Uso"},{"location":"diagrams/#diagrama-entidad-relacion-simplificado","text":"Tenant \u2500\u2500\u252c\u2500\u2500\u25ba Empresa \u251c\u2500\u2500\u25ba Usuario (con roles por tenant) \u251c\u2500\u2500\u25ba Configuraci\u00f3n \u251c\u2500\u2500\u25ba Inventario \u251c\u2500\u2500\u25ba Clientes / Proveedores \u2514\u2500\u2500\u25ba Facturas / Compras / Ventas","title":"Diagrama Entidad-Relaci\u00f3n Simplificado"},{"location":"example/","text":"Crear un nuevo proyecto Crear un nuevo proyecto utilizando el instalador de Laravel laravel new name-app Starter Kits Se puede utilizar un Starter Kit deseado ejemplo: React Vue Livewire Si utiliza alguno de los Starter Kit debe realizar la configuraci\u00f3n pertinente para la gesti\u00f3n de rutas. Iniciar el servidor de desarrollo local de Laravel cd name-app npm install && npm run build composer run dev Configuraci\u00f3n del entorno Para configurar el entorno de la aplicaci\u00f3n se debe gestionar el archivo .env Configurar base de datos DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= Si elige utilizar una base de datos que no sea SQLite, tendr\u00e1 que crear la base de datos y ejecutar las migraciones de la base de datos de su aplicaci\u00f3n: php artisan migrate Instalar tenancy for Laravel composer require stancl/tenancy php artisan tenancy:install php artisan migrate Registrar el prestador de servicios en bootstrap/providers.php: return [ App\\Providers\\AppServiceProvider::class, App\\Providers\\TenancyServiceProvider::class, // <-- here ]; Para personalizar y gestionar los requerimientos de nuestra aplicaci\u00f3n, se requiere crear un modelo Tenant y configurar nuestro modelo con el siguiente contenido <?php namespace App\\Models; use Stancl\\Tenancy\\Database\\Models\\Tenant as BaseTenant; use Stancl\\Tenancy\\Contracts\\TenantWithDatabase; use Stancl\\Tenancy\\Database\\Concerns\\HasDatabase; use Stancl\\Tenancy\\Database\\Concerns\\HasDomains; class Tenant extends BaseTenant implements TenantWithDatabase { use HasDatabase, HasDomains; } Como se ha personalizado el Modelo, es necesario realizar una configuraci\u00f3n en el archivo config/tenancy.php 'tenant_model' => \\App\\Models\\Tenant::class, Configurar las rutas En el archivo de rutas realizamos un ajuste donde las rutas centrales est\u00e9n registradas \u00fanicamente en dominios centrales. foreach (config('tenancy.central_domains') as $domain) { Route::domain($domain)->group(function () { // your actual routes }); } Dominios centrales En el archivo de configuraci\u00f3n config/tenancy.php se debe agregar el dominio central 'central_domains' => [ 'saas.test', // Add the ones that you use. I use this one with Laravel Valet. ], Los valores predeterminados son : 'central_domains' => [ '127.0.0.1', 'localhost', ], Archivo de rutas de Tenants En el directorio de archivos de Laravel se encuentra el directorio routes/tenant.php para la configuraci\u00f3n de rutas de los tenants. Por defecto tenemos la siguiente configuraci\u00f3n Route::middleware([ 'web', InitializeTenancyByDomain::class, PreventAccessFromCentralDomains::class, ])->group(function () { Route::get('/', function () { return 'This is your multi-tenant application. The id of the current tenant is ' . tenant('id'); }); }); Estas rutas solo ser\u00e1n accesibles en dominios de inquilinos (no centrales) Migraciones En el directorio de archivos de Laravel se incluye la carpeta de migraciones para los tenants, en el directorio migrations/tenant . En este directorio se deben incluir las migraciones que consideren pertinentes para los tenants. Para ejecutar las migraciones de los tenants ejecuta el siguiente comando: php artisan tenants:migrate Para crear migraciones espec\u00edficas para cada tenant ejecuta el siguiente comando : php artisan make:migration create_table_name_for_tenant --path=database/migrations/tenant Si necesitas migrar solo un tenant espec\u00edfico, puedes especificarlo con la opci\u00f3n --tenants, as\u00ed: php artisan tenants:migrate --tenants=tenant_id Acceder al sistema Accede al sistema con el dominio de cada tenant deseado. Personalizaci\u00f3n de base de Datos ejemplo: Route::get('prueba', function() { $tenant1 = \\App\\Models\\Tenant::create([ 'id' => 'id_tenant', 'tenancy_db_name' => 'tenantname', 'tenancy_db_username' => 'tenant1', 'tenancy_db_password' => 'password', 'tenancy_db_connection' => 'sqlite' ]) $tenant1->domains()->create(['domain' => 'foo.localhost']); }) Repositorio Como accerder a un tenant desde la app central // Consulto el tenant al cual quiero acceder $tenant = Tenant::first() // Le indico a laravel a trav\u00e9s del helper que quiero acceder a ese tenant tenancy()->initialize($tenant); Ejemplo: La consulta $user = \\App\\Models\\User::first() ahora devolver\u00e1 el usuario del tenant al que acced\u00ed. Si queremos finalizar la conexi\u00f3n lo podemos hacer de la siguiente manera: tenancy()->end(); // Finalizo la conexi\u00f3n al tenant // Ahora las consultas volver\u00e1n a ser sobre el tenant central Viceversa // Acceder desde un tenant a la app central // Lo hago a trav\u00e9s de una function anonima tenancy()->central(function () { // Aqu\u00ed dentro las consultas ser\u00e1n sobre el tenant central $user = \\App\\Models\\User::first(); });","title":"Implementaci\u00f3n de un sistema multitenancy"},{"location":"example/#crear-un-nuevo-proyecto","text":"Crear un nuevo proyecto utilizando el instalador de Laravel laravel new name-app","title":"Crear un nuevo proyecto"},{"location":"example/#starter-kits","text":"Se puede utilizar un Starter Kit deseado ejemplo: React Vue Livewire Si utiliza alguno de los Starter Kit debe realizar la configuraci\u00f3n pertinente para la gesti\u00f3n de rutas.","title":"Starter Kits"},{"location":"example/#iniciar-el-servidor-de-desarrollo-local-de-laravel","text":"cd name-app npm install && npm run build composer run dev","title":"Iniciar el servidor de desarrollo local de Laravel"},{"location":"example/#configuracion-del-entorno","text":"Para configurar el entorno de la aplicaci\u00f3n se debe gestionar el archivo .env Configurar base de datos DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= Si elige utilizar una base de datos que no sea SQLite, tendr\u00e1 que crear la base de datos y ejecutar las migraciones de la base de datos de su aplicaci\u00f3n: php artisan migrate","title":"Configuraci\u00f3n del entorno"},{"location":"example/#instalar-tenancy-for-laravel","text":"composer require stancl/tenancy php artisan tenancy:install php artisan migrate Registrar el prestador de servicios en bootstrap/providers.php: return [ App\\Providers\\AppServiceProvider::class, App\\Providers\\TenancyServiceProvider::class, // <-- here ]; Para personalizar y gestionar los requerimientos de nuestra aplicaci\u00f3n, se requiere crear un modelo Tenant y configurar nuestro modelo con el siguiente contenido <?php namespace App\\Models; use Stancl\\Tenancy\\Database\\Models\\Tenant as BaseTenant; use Stancl\\Tenancy\\Contracts\\TenantWithDatabase; use Stancl\\Tenancy\\Database\\Concerns\\HasDatabase; use Stancl\\Tenancy\\Database\\Concerns\\HasDomains; class Tenant extends BaseTenant implements TenantWithDatabase { use HasDatabase, HasDomains; } Como se ha personalizado el Modelo, es necesario realizar una configuraci\u00f3n en el archivo config/tenancy.php 'tenant_model' => \\App\\Models\\Tenant::class, Configurar las rutas En el archivo de rutas realizamos un ajuste donde las rutas centrales est\u00e9n registradas \u00fanicamente en dominios centrales. foreach (config('tenancy.central_domains') as $domain) { Route::domain($domain)->group(function () { // your actual routes }); } Dominios centrales En el archivo de configuraci\u00f3n config/tenancy.php se debe agregar el dominio central 'central_domains' => [ 'saas.test', // Add the ones that you use. I use this one with Laravel Valet. ], Los valores predeterminados son : 'central_domains' => [ '127.0.0.1', 'localhost', ],","title":"Instalar tenancy for Laravel"},{"location":"example/#archivo-de-rutas-de-tenants","text":"En el directorio de archivos de Laravel se encuentra el directorio routes/tenant.php para la configuraci\u00f3n de rutas de los tenants. Por defecto tenemos la siguiente configuraci\u00f3n Route::middleware([ 'web', InitializeTenancyByDomain::class, PreventAccessFromCentralDomains::class, ])->group(function () { Route::get('/', function () { return 'This is your multi-tenant application. The id of the current tenant is ' . tenant('id'); }); }); Estas rutas solo ser\u00e1n accesibles en dominios de inquilinos (no centrales)","title":"Archivo de rutas de Tenants"},{"location":"example/#migraciones","text":"En el directorio de archivos de Laravel se incluye la carpeta de migraciones para los tenants, en el directorio migrations/tenant . En este directorio se deben incluir las migraciones que consideren pertinentes para los tenants. Para ejecutar las migraciones de los tenants ejecuta el siguiente comando: php artisan tenants:migrate Para crear migraciones espec\u00edficas para cada tenant ejecuta el siguiente comando : php artisan make:migration create_table_name_for_tenant --path=database/migrations/tenant Si necesitas migrar solo un tenant espec\u00edfico, puedes especificarlo con la opci\u00f3n --tenants, as\u00ed: php artisan tenants:migrate --tenants=tenant_id","title":"Migraciones"},{"location":"example/#acceder-al-sistema","text":"Accede al sistema con el dominio de cada tenant deseado.","title":"Acceder al sistema"},{"location":"example/#personalizacion-de-base-de-datos","text":"ejemplo: Route::get('prueba', function() { $tenant1 = \\App\\Models\\Tenant::create([ 'id' => 'id_tenant', 'tenancy_db_name' => 'tenantname', 'tenancy_db_username' => 'tenant1', 'tenancy_db_password' => 'password', 'tenancy_db_connection' => 'sqlite' ]) $tenant1->domains()->create(['domain' => 'foo.localhost']); })","title":"Personalizaci\u00f3n de base de Datos"},{"location":"example/#repositorio","text":"","title":"Repositorio"},{"location":"example/#como-accerder-a-un-tenant-desde-la-app-central","text":"// Consulto el tenant al cual quiero acceder $tenant = Tenant::first() // Le indico a laravel a trav\u00e9s del helper que quiero acceder a ese tenant tenancy()->initialize($tenant); Ejemplo: La consulta $user = \\App\\Models\\User::first() ahora devolver\u00e1 el usuario del tenant al que acced\u00ed. Si queremos finalizar la conexi\u00f3n lo podemos hacer de la siguiente manera: tenancy()->end(); // Finalizo la conexi\u00f3n al tenant // Ahora las consultas volver\u00e1n a ser sobre el tenant central Viceversa // Acceder desde un tenant a la app central // Lo hago a trav\u00e9s de una function anonima tenancy()->central(function () { // Aqu\u00ed dentro las consultas ser\u00e1n sobre el tenant central $user = \\App\\Models\\User::first(); });","title":"Como accerder a un tenant desde la app central"},{"location":"laravel/","text":"En la comunidad de desarrollo entorno a Laravel existen varios paquetes utilizados para la implementaci\u00f3n de sistemas multitenant entre ellos tenemos. SaaSykit Tenancy : Este paquete es ideal para construir aplicaciones SaaS. Ofrece una estructura s\u00f3lida y es f\u00e1cil de usar, lo que lo convierte en una excelente opci\u00f3n para nuevos proyectos. Tenancy for Laravel : Este es uno de los paquetes m\u00e1s populares y completos. Permite una gran flexibilidad en la gesti\u00f3n de bases de datos y es muy bien documentado, lo que facilita su implementaci\u00f3n. Spatie Laravel Multi-tenancy : Este paquete es conocido por su simplicidad y eficacia. Es perfecto si buscas una soluci\u00f3n que se integre bien con otros paquetes de Spatie, que son muy utilizados en la comunidad de Laravel. Tenancy Package : Este es un paquete m\u00e1s simple que ofrece una implementaci\u00f3n b\u00e1sica de multitenancy. Es ideal si necesitas algo ligero y no requieres muchas caracter\u00edsticas avanzadas. Laratrust : Aunque no es exclusivamente un paquete de multitenancy, Laratrust puede ser \u00fatil si necesitas gestionar roles y permisos en un entorno multitenant. Para la presente investigaci\u00f3n se implementar\u00e1 un sistema multitenant usando el paquete Tenancy for Laravel Documentaci\u00f3n Tenancy for Laravel","title":"Paquete Laravel multitenancy"},{"location":"limitations/","text":"1. Dificultades en la gesti\u00f3n de datos Aislamiento de datos: Asegurarte de que los datos de un inquilino no se mezclen con los de otro puede ser complicado, especialmente si no se implementa correctamente. Consultas complejas: Realizar consultas que involucren datos de m\u00faltiples inquilinos puede ser m\u00e1s dif\u00edcil y requerir l\u00f3gica adicional. 2. Escalabilidad Rendimiento: A medida que el n\u00famero de inquilinos crece, el rendimiento puede verse afectado si no se optimizan las consultas y la estructura de la base de datos. Recursos compartidos: Los inquilinos comparten los mismos recursos del servidor, lo que puede llevar a problemas de rendimiento si uno de ellos consume demasiados recursos. 3. Configuraci\u00f3n y mantenimiento Complejidad en la configuraci\u00f3n: Configurar un sistema multitenant puede ser m\u00e1s complejo que un sistema monol\u00edtico, especialmente en t\u00e9rminos de rutas, middleware y configuraci\u00f3n de base de datos. Actualizaciones: Las actualizaciones del sistema pueden ser m\u00e1s complicadas, ya que debes asegurarte de que todos los inquilinos se vean afectados de manera adecuada. 4. Limitaciones en la personalizaci\u00f3n Personalizaci\u00f3n de inquilinos: Si necesitas que cada inquilino tenga caracter\u00edsticas o configuraciones \u00fanicas, esto puede requerir un esfuerzo adicional en la implementaci\u00f3n. Dependencias de terceros: Algunas bibliotecas o paquetes pueden no ser compatibles con un enfoque multitenant, lo que limita las opciones disponibles. 5. Seguridad Vulnerabilidades: Si no se implementa correctamente, puede haber riesgos de seguridad, como la exposici\u00f3n accidental de datos entre inquilinos. Autenticaci\u00f3n y autorizaci\u00f3n: Manejar la autenticaci\u00f3n y autorizaci\u00f3n de manera efectiva para m\u00faltiples inquilinos puede ser m\u00e1s complicado.","title":"Limitaciones de multitenancy en Laravel"},{"location":"limitations/#1-dificultades-en-la-gestion-de-datos","text":"Aislamiento de datos: Asegurarte de que los datos de un inquilino no se mezclen con los de otro puede ser complicado, especialmente si no se implementa correctamente. Consultas complejas: Realizar consultas que involucren datos de m\u00faltiples inquilinos puede ser m\u00e1s dif\u00edcil y requerir l\u00f3gica adicional.","title":"1. Dificultades en la gesti\u00f3n de datos"},{"location":"limitations/#2-escalabilidad","text":"Rendimiento: A medida que el n\u00famero de inquilinos crece, el rendimiento puede verse afectado si no se optimizan las consultas y la estructura de la base de datos. Recursos compartidos: Los inquilinos comparten los mismos recursos del servidor, lo que puede llevar a problemas de rendimiento si uno de ellos consume demasiados recursos.","title":"2. Escalabilidad"},{"location":"limitations/#3-configuracion-y-mantenimiento","text":"Complejidad en la configuraci\u00f3n: Configurar un sistema multitenant puede ser m\u00e1s complejo que un sistema monol\u00edtico, especialmente en t\u00e9rminos de rutas, middleware y configuraci\u00f3n de base de datos. Actualizaciones: Las actualizaciones del sistema pueden ser m\u00e1s complicadas, ya que debes asegurarte de que todos los inquilinos se vean afectados de manera adecuada.","title":"3. Configuraci\u00f3n y mantenimiento"},{"location":"limitations/#4-limitaciones-en-la-personalizacion","text":"Personalizaci\u00f3n de inquilinos: Si necesitas que cada inquilino tenga caracter\u00edsticas o configuraciones \u00fanicas, esto puede requerir un esfuerzo adicional en la implementaci\u00f3n. Dependencias de terceros: Algunas bibliotecas o paquetes pueden no ser compatibles con un enfoque multitenant, lo que limita las opciones disponibles.","title":"4. Limitaciones en la personalizaci\u00f3n"},{"location":"limitations/#5-seguridad","text":"Vulnerabilidades: Si no se implementa correctamente, puede haber riesgos de seguridad, como la exposici\u00f3n accidental de datos entre inquilinos. Autenticaci\u00f3n y autorizaci\u00f3n: Manejar la autenticaci\u00f3n y autorizaci\u00f3n de manera efectiva para m\u00faltiples inquilinos puede ser m\u00e1s complicado.","title":"5. Seguridad"},{"location":"requirements/","text":"Requerimientos Funcionales ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-01 Gesti\u00f3n de Empresas (Tenants) Permitir crear, editar, eliminar y listar empresas dentro del sistema, cada una con su configuraci\u00f3n independiente. Aplicaci\u00f3n Base Alta Ninguna RF-02 Aislamiento de Datos por Empresa Garantizar que cada empresa visualice solo su propia informaci\u00f3n en todos los m\u00f3dulos. Todos Alta RF-01 RF-03 Switch de Empresa Activa Permitir que un usuario con acceso a m\u00faltiples empresas desde la aplicaci\u00f3n base pueda cambiar de empresa activa desde la interfaz. Aplicaci\u00f3n Base Alta RF-01, RF-02 RF-04 Registro de Usuarios Multitenant Permitir asignaci\u00f3n autom\u00e1tica de permisos del administrador de la instancia central a las nuevas empresas creadas. Aplicaci\u00f3n Base Alta RF-01 RF-05 Control de Roles y Permisos por Empresa Gestionar roles y permisos para cada empresa de forma independiente. Aplicaci\u00f3n Base Alta RF-04 ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-06 Asignaci\u00f3n de permisos Permitir la asignaci\u00f3n de permisos a usuarios desde la instancia central a cada uno de las empresas. Aplicaci\u00f3n Base Alta RF-01, RF-04 RF-07 Registro de Ventas por Empresa Registrar operaciones de ventas por empresa, aisladas de otras empresas. Ventas Media RF-01, RF-02 RF-08 Reportes Filtrados por Empresa Generar reportes de compras, ventas, inventario, contabilidad, etc., filtrados por empresa. Reportes Alta RF-06, RF-07 RF-09 Gesti\u00f3n de Inventario por Empresa Manejar inventarios separados por empresa, con control individual de almacenes, productos y existencias. Inventario Alta RF-01, RF-02 RF-10 Auditor\u00eda por Tenant Registrar logs de acciones realizadas en el sistema, identificando usuario, acci\u00f3n y empresa correspondiente. Seguridad Alta Todos ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-11 Configuraci\u00f3n de Par\u00e1metros por Empresa Permitir a cada empresa definir sus propios par\u00e1metros operativos: moneda, impuestos, unidades, etc. Configuraci\u00f3n Alta RF-01 RF-12 Gesti\u00f3n de Sucursales Posibilidad de que cada empresa tenga m\u00faltiples sucursales con inventario, personal y operaciones separadas. Administraci\u00f3n Media RF-01 RF-13 M\u00f3dulo de Facturaci\u00f3n por Empresa Emitir facturas fiscales, electr\u00f3nicas o manuales para cada empresa, con su propio formato, numeraci\u00f3n y control. Facturaci\u00f3n Alta RF-01, RF-07 RF-14 Gesti\u00f3n de Proveedores por Empresa Registrar, consultar y administrar proveedores de forma independiente por empresa. Compras Media RF-01 RF-15 Gesti\u00f3n de Clientes por Empresa Registrar, consultar y administrar clientes de forma aislada por empresa. Ventas Media RF-01 ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-16 Control de Accesos por M\u00f3dulo Definir a qu\u00e9 m\u00f3dulos puede acceder cada usuario seg\u00fan su empresa y rol asignado. Seguridad Alta RF-04, RF-05 RF-17 Multilenguaje Posibilidad de visualizar la interfaz en distintos idiomas configurables por usuario o empresa. UI General Baja RF-11 RF-18 Integraci\u00f3n con API Externa por Empresa Integrar servicios externos (facturaci\u00f3n, pago, log\u00edstica) de forma espec\u00edfica para cada empresa, con sus claves y endpoints propios. Integraciones Media RF-01 RF-19 Exportaci\u00f3n de Datos por Empresa Permitir exportar informaci\u00f3n en formatos CSV, Excel o PDF, con datos \u00fanicamente de la empresa activa. Reportes Alta RF-08 RF-20 Dashboard Personalizado por Empresa Cada empresa debe poder visualizar su propio tablero de control con indicadores y KPIs relevantes. Reportes/UI Alta RF-02, RF-08 Requerimientos No Funcionales ID Nombre del Requerimiento Descripci\u00f3n Prioridad RNF-01 Escalabilidad Horizontal El sistema debe permitir escalar horizontalmente para soportar m\u00faltiples empresas sin afectar el rendimiento. Alta RNF-02 Seguridad en el Aislamiento de Datos Debe garantizarse el aislamiento total de datos entre empresas, evitando accesos cruzados no autorizados. Alta RNF-03 Disponibilidad El sistema debe estar disponible al menos el 99.5% del tiempo mensual. Alta RNF-04 Soporte Multinavegador El sistema debe funcionar correctamente en los navegadores modernos: Chrome, Firefox, Edge y Safari. Media RNF-05 Tiempos de Carga Las p\u00e1ginas principales deben cargar en menos de 3 segundos bajo condiciones normales de uso. Alta RNF-06 Compatibilidad M\u00f3vil El sistema debe ser accesible desde dispositivos m\u00f3viles con una interfaz responsiva. Media RNF-07 Logs Centralizados Toda actividad cr\u00edtica debe quedar registrada en un sistema de logs centralizado con trazabilidad por empresa. Alta RNF-08 Backup Diario Se debe realizar una copia de seguridad completa de los datos diariamente y por cada empresa. Alta RNF-09 Configurabilidad El sistema debe permitir parametrizar ciertos comportamientos por empresa (moneda, idioma, zona horaria). Media RNF-10 Cumplimiento Legal El sistema debe cumplir con la legislaci\u00f3n vigente en materia de protecci\u00f3n de datos (ej. GDPR, LOPD). Alta","title":"Requerimientos del sistema"},{"location":"requirements/#requerimientos-funcionales","text":"ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-01 Gesti\u00f3n de Empresas (Tenants) Permitir crear, editar, eliminar y listar empresas dentro del sistema, cada una con su configuraci\u00f3n independiente. Aplicaci\u00f3n Base Alta Ninguna RF-02 Aislamiento de Datos por Empresa Garantizar que cada empresa visualice solo su propia informaci\u00f3n en todos los m\u00f3dulos. Todos Alta RF-01 RF-03 Switch de Empresa Activa Permitir que un usuario con acceso a m\u00faltiples empresas desde la aplicaci\u00f3n base pueda cambiar de empresa activa desde la interfaz. Aplicaci\u00f3n Base Alta RF-01, RF-02 RF-04 Registro de Usuarios Multitenant Permitir asignaci\u00f3n autom\u00e1tica de permisos del administrador de la instancia central a las nuevas empresas creadas. Aplicaci\u00f3n Base Alta RF-01 RF-05 Control de Roles y Permisos por Empresa Gestionar roles y permisos para cada empresa de forma independiente. Aplicaci\u00f3n Base Alta RF-04","title":"Requerimientos Funcionales"},{"location":"requirements/#_1","text":"ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-06 Asignaci\u00f3n de permisos Permitir la asignaci\u00f3n de permisos a usuarios desde la instancia central a cada uno de las empresas. Aplicaci\u00f3n Base Alta RF-01, RF-04 RF-07 Registro de Ventas por Empresa Registrar operaciones de ventas por empresa, aisladas de otras empresas. Ventas Media RF-01, RF-02 RF-08 Reportes Filtrados por Empresa Generar reportes de compras, ventas, inventario, contabilidad, etc., filtrados por empresa. Reportes Alta RF-06, RF-07 RF-09 Gesti\u00f3n de Inventario por Empresa Manejar inventarios separados por empresa, con control individual de almacenes, productos y existencias. Inventario Alta RF-01, RF-02 RF-10 Auditor\u00eda por Tenant Registrar logs de acciones realizadas en el sistema, identificando usuario, acci\u00f3n y empresa correspondiente. Seguridad Alta Todos","title":""},{"location":"requirements/#_2","text":"ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-11 Configuraci\u00f3n de Par\u00e1metros por Empresa Permitir a cada empresa definir sus propios par\u00e1metros operativos: moneda, impuestos, unidades, etc. Configuraci\u00f3n Alta RF-01 RF-12 Gesti\u00f3n de Sucursales Posibilidad de que cada empresa tenga m\u00faltiples sucursales con inventario, personal y operaciones separadas. Administraci\u00f3n Media RF-01 RF-13 M\u00f3dulo de Facturaci\u00f3n por Empresa Emitir facturas fiscales, electr\u00f3nicas o manuales para cada empresa, con su propio formato, numeraci\u00f3n y control. Facturaci\u00f3n Alta RF-01, RF-07 RF-14 Gesti\u00f3n de Proveedores por Empresa Registrar, consultar y administrar proveedores de forma independiente por empresa. Compras Media RF-01 RF-15 Gesti\u00f3n de Clientes por Empresa Registrar, consultar y administrar clientes de forma aislada por empresa. Ventas Media RF-01","title":""},{"location":"requirements/#_3","text":"ID Nombre del Requerimiento Descripci\u00f3n M\u00f3dulo Prioridad Dependencias RF-16 Control de Accesos por M\u00f3dulo Definir a qu\u00e9 m\u00f3dulos puede acceder cada usuario seg\u00fan su empresa y rol asignado. Seguridad Alta RF-04, RF-05 RF-17 Multilenguaje Posibilidad de visualizar la interfaz en distintos idiomas configurables por usuario o empresa. UI General Baja RF-11 RF-18 Integraci\u00f3n con API Externa por Empresa Integrar servicios externos (facturaci\u00f3n, pago, log\u00edstica) de forma espec\u00edfica para cada empresa, con sus claves y endpoints propios. Integraciones Media RF-01 RF-19 Exportaci\u00f3n de Datos por Empresa Permitir exportar informaci\u00f3n en formatos CSV, Excel o PDF, con datos \u00fanicamente de la empresa activa. Reportes Alta RF-08 RF-20 Dashboard Personalizado por Empresa Cada empresa debe poder visualizar su propio tablero de control con indicadores y KPIs relevantes. Reportes/UI Alta RF-02, RF-08","title":""},{"location":"requirements/#requerimientos-no-funcionales","text":"ID Nombre del Requerimiento Descripci\u00f3n Prioridad RNF-01 Escalabilidad Horizontal El sistema debe permitir escalar horizontalmente para soportar m\u00faltiples empresas sin afectar el rendimiento. Alta RNF-02 Seguridad en el Aislamiento de Datos Debe garantizarse el aislamiento total de datos entre empresas, evitando accesos cruzados no autorizados. Alta RNF-03 Disponibilidad El sistema debe estar disponible al menos el 99.5% del tiempo mensual. Alta RNF-04 Soporte Multinavegador El sistema debe funcionar correctamente en los navegadores modernos: Chrome, Firefox, Edge y Safari. Media RNF-05 Tiempos de Carga Las p\u00e1ginas principales deben cargar en menos de 3 segundos bajo condiciones normales de uso. Alta RNF-06 Compatibilidad M\u00f3vil El sistema debe ser accesible desde dispositivos m\u00f3viles con una interfaz responsiva. Media RNF-07 Logs Centralizados Toda actividad cr\u00edtica debe quedar registrada en un sistema de logs centralizado con trazabilidad por empresa. Alta RNF-08 Backup Diario Se debe realizar una copia de seguridad completa de los datos diariamente y por cada empresa. Alta RNF-09 Configurabilidad El sistema debe permitir parametrizar ciertos comportamientos por empresa (moneda, idioma, zona horaria). Media RNF-10 Cumplimiento Legal El sistema debe cumplir con la legislaci\u00f3n vigente en materia de protecci\u00f3n de datos (ej. GDPR, LOPD). Alta","title":"Requerimientos No Funcionales"},{"location":"technical_proposal/","text":"Arquitectura multitenant Multitenant es un modelo de arquitectura de software que permite que una \u00fanica instancia de una aplicaci\u00f3n atienda a m\u00faltiples clientes. En otras palabras, un solo conjunto de c\u00f3digo puede atender a varios usuarios, manteniendo la informaci\u00f3n confidencial de cada uno aislada y accesible \u00fanicamente por ellos. Cada cliente del servicio se considera un tenant, lo que posibilita la personalizaci\u00f3n de ciertos elementos de la aplicaci\u00f3n, como los colores de la interfaz, aunque no se modifica el c\u00f3digo en s\u00ed. Es relevante destacar que, en esta arquitectura, un cliente no tiene que ser un \u00fanico usuario, sino que puede representar a un grupo de usuarios. Por ejemplo, algunos servicios operan con equipos o grupos, donde un cliente puede disponer de un subdominio para acceder a la aplicaci\u00f3n, permitiendo que m\u00faltiples usuarios visualicen la informaci\u00f3n asociada a ese cliente. Ventajas Econom\u00eda en desarrollo y mantenimiento, ya que los costos son distribuidos entre todos los clientes. F\u00e1cil actualizaci\u00f3n, ya que es necesario solo actualizar una sola instancia. Seguridad de la informaci\u00f3n de cada cliente, ya que cuenta con un schema separado para cada uno. Optimiza el uso de recursos de los servidores. Desventajas Dificulta el desarrollo de caracter\u00edsticas espec\u00edficas para un cliente. \u00danico punto de falla: si la aplicaci\u00f3n tiene un error o falla, fallar\u00e1 para todos los clientes. Gesti\u00f3n de bases de datos. Arquitecturas en las bases de datos. En Postgres un Schema act\u00faa como un nombre de espacio, lo que permite una organizaci\u00f3n/separaci\u00f3n a la base de datos. (Base de datos -> Schema -> Tabla) Compartida (Shared) Una Base de Datos - Un Schema Esta arquitectura es la que se usa por defecto en la mayor\u00eda de aplicaciones, se separa los usuarios de la aplicaci\u00f3n por una relaci\u00f3n con la tabla de usuarios. Ventajas La capa de datos es f\u00e1cil de construir (crear las tablas de la base de datos). Todos los usuarios usan el mismo dominio de la aplicaci\u00f3n. Desventajas Es costoso (Tama\u00f1o y cantidad de peticiones a la base de datos). Separada (Isolated) Cada cliente (tenant) tiene su propia base de datos Esta arquitectura permite usar cualquier motor de base de datos, se puede relacionar como el proceso de virtualizaci\u00f3n en el que cada instancia se implementa para el nuevo cliente. Ventajas Mayor seguridad. F\u00e1cil recuperaci\u00f3n en caso de da\u00f1o en la base de datos Bajo consumo de recursos de procesamiento Desventajas Dificultad para escalar. Costoso en recursos de almacenamiento (se necesitan muchas bases de datos). Dificultad para compartir informaci\u00f3n entre clientes. Dificultad de actualizaci\u00f3n (hay que hacer el proceso por cada base de datos). H\u00edbrida (Semi - Isolated) Una base de datos - Multiples Schemas Esta arquitectura usa lo mejor de las dos anteriores y es posible usarla en PostgreSQL. Esto permite, por ejemplo, que cada uno de los clientes tenga usuarios y sus datos est\u00e9n separados por cada schema. Ventajas Facilmente escalable. Reducci\u00f3n de costos en almacenamiento y procesamiento. Seguro (cada cliente tiene su informaci\u00f3n separada en el schema). Compartir informaci\u00f3n entre clientes (hay tablas que se pueden acceder por todos los clientes). Desventajas El proceso de recuperaci\u00f3n de datos de un schema es m\u00e1s complejo. Es menos seguro que las bases de datos separadas.","title":"Propuesta t\u00e9cnica"},{"location":"technical_proposal/#arquitectura-multitenant","text":"Multitenant es un modelo de arquitectura de software que permite que una \u00fanica instancia de una aplicaci\u00f3n atienda a m\u00faltiples clientes. En otras palabras, un solo conjunto de c\u00f3digo puede atender a varios usuarios, manteniendo la informaci\u00f3n confidencial de cada uno aislada y accesible \u00fanicamente por ellos. Cada cliente del servicio se considera un tenant, lo que posibilita la personalizaci\u00f3n de ciertos elementos de la aplicaci\u00f3n, como los colores de la interfaz, aunque no se modifica el c\u00f3digo en s\u00ed. Es relevante destacar que, en esta arquitectura, un cliente no tiene que ser un \u00fanico usuario, sino que puede representar a un grupo de usuarios. Por ejemplo, algunos servicios operan con equipos o grupos, donde un cliente puede disponer de un subdominio para acceder a la aplicaci\u00f3n, permitiendo que m\u00faltiples usuarios visualicen la informaci\u00f3n asociada a ese cliente.","title":"Arquitectura multitenant"},{"location":"technical_proposal/#ventajas","text":"Econom\u00eda en desarrollo y mantenimiento, ya que los costos son distribuidos entre todos los clientes. F\u00e1cil actualizaci\u00f3n, ya que es necesario solo actualizar una sola instancia. Seguridad de la informaci\u00f3n de cada cliente, ya que cuenta con un schema separado para cada uno. Optimiza el uso de recursos de los servidores.","title":"Ventajas"},{"location":"technical_proposal/#desventajas","text":"Dificulta el desarrollo de caracter\u00edsticas espec\u00edficas para un cliente. \u00danico punto de falla: si la aplicaci\u00f3n tiene un error o falla, fallar\u00e1 para todos los clientes.","title":"Desventajas"},{"location":"technical_proposal/#gestion-de-bases-de-datos","text":"Arquitecturas en las bases de datos. En Postgres un Schema act\u00faa como un nombre de espacio, lo que permite una organizaci\u00f3n/separaci\u00f3n a la base de datos. (Base de datos -> Schema -> Tabla)","title":"Gesti\u00f3n de bases de datos."},{"location":"technical_proposal/#compartida-shared","text":"Una Base de Datos - Un Schema Esta arquitectura es la que se usa por defecto en la mayor\u00eda de aplicaciones, se separa los usuarios de la aplicaci\u00f3n por una relaci\u00f3n con la tabla de usuarios. Ventajas La capa de datos es f\u00e1cil de construir (crear las tablas de la base de datos). Todos los usuarios usan el mismo dominio de la aplicaci\u00f3n. Desventajas Es costoso (Tama\u00f1o y cantidad de peticiones a la base de datos).","title":"Compartida (Shared)"},{"location":"technical_proposal/#separada-isolated","text":"Cada cliente (tenant) tiene su propia base de datos Esta arquitectura permite usar cualquier motor de base de datos, se puede relacionar como el proceso de virtualizaci\u00f3n en el que cada instancia se implementa para el nuevo cliente. Ventajas Mayor seguridad. F\u00e1cil recuperaci\u00f3n en caso de da\u00f1o en la base de datos Bajo consumo de recursos de procesamiento Desventajas Dificultad para escalar. Costoso en recursos de almacenamiento (se necesitan muchas bases de datos). Dificultad para compartir informaci\u00f3n entre clientes. Dificultad de actualizaci\u00f3n (hay que hacer el proceso por cada base de datos).","title":"Separada (Isolated)"},{"location":"technical_proposal/#hibrida-semi-isolated","text":"Una base de datos - Multiples Schemas Esta arquitectura usa lo mejor de las dos anteriores y es posible usarla en PostgreSQL. Esto permite, por ejemplo, que cada uno de los clientes tenga usuarios y sus datos est\u00e9n separados por cada schema. Ventajas Facilmente escalable. Reducci\u00f3n de costos en almacenamiento y procesamiento. Seguro (cada cliente tiene su informaci\u00f3n separada en el schema). Compartir informaci\u00f3n entre clientes (hay tablas que se pueden acceder por todos los clientes). Desventajas El proceso de recuperaci\u00f3n de datos de un schema es m\u00e1s complejo. Es menos seguro que las bases de datos separadas.","title":"H\u00edbrida (Semi - Isolated)"}]}